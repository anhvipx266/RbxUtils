{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RbxUtils Documentation","text":"<p>Welcome to RbxUtils documentation - a powerful collection of utilities for Roblox game development.</p>"},{"location":"#overview","title":"Overview","text":"<p>RbxUtils provides modules and utilities to help you develop Roblox games more efficiently. Includes:</p> <ul> <li>Structure System: Data management and synchronization system between server-client</li> <li>Type System: Powerful type system for Lua/Luau</li> <li>And many other utilities...</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<ol> <li>Clone this repository into your Roblox project</li> <li>Use Rojo to sync code into Roblox Studio</li> <li>Require the necessary modules in your scripts</li> </ol>"},{"location":"#basic-example","title":"Basic Example","text":"<pre><code>local Structure = require(ReplicatedStorage.Systems.Structure)\n\n-- Create structure to manage game data\nlocal gameData = {\n    round = 1,\n    players = {},\n    settings = {\n        maxPlayers = 10,\n        roundTime = 300\n    }\n}\n\nlocal config = Instance.new(\"Configuration\")\nconfig.Name = \"GameData\"\nconfig.Parent = game.ReplicatedStorage\n\nlocal binder = Structure.binder(gameData, config)\n</code></pre>"},{"location":"#modules","title":"Modules","text":""},{"location":"#structure","title":"Structure","text":"<p>Powerful system for binding and synchronizing table data with Configuration instances, supporting real-time change observation.</p>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>Roblox Studio</li> <li>Rojo (recommended)</li> <li>Aftman (for dependency management)</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository</li> <li>Clone your fork locally</li> <li>Create a new branch for your feature</li> <li>Make your changes</li> <li>Test thoroughly</li> <li>Submit a pull request</li> </ol>"},{"location":"#code-style","title":"Code Style","text":"<ul> <li>Follow Luau coding standards</li> <li>Use meaningful variable names</li> <li>Add JSDoc-style comments for functions</li> <li>Include examples in documentation</li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>RbxUtils/\n\u251c\u2500\u2500 src/                    # Source code\n\u2502   \u251c\u2500\u2500 ReplicatedStorage/  # Shared modules\n\u2502   \u2514\u2500\u2500 ServerScriptService/ # Server-only modules\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 places/                 # Roblox place files\n\u2514\u2500\u2500 projects/              # Project configurations\n</code></pre>"},{"location":"#api-documentation","title":"API Documentation","text":"<p>Detailed API documentation is available for each module:</p> <ul> <li>Structure System - Data binding and synchronization</li> <li>More modules coming soon...</li> </ul>"},{"location":"#examples","title":"Examples","text":""},{"location":"#game-state-management","title":"Game State Management","text":"<pre><code>-- Server\nlocal GameState = require(ReplicatedStorage.Systems.Structure)\n\nlocal gameConfig = Instance.new(\"Configuration\")\ngameConfig.Name = \"GameState\"\ngameConfig.Parent = game.ReplicatedStorage\n\nlocal gameData = {\n    status = \"waiting\",\n    round = 0,\n    timeLeft = 0,\n    players = {}\n}\n\nlocal gameManager = GameState.binder(gameData, gameConfig)\n\n-- Client\nlocal gameReader = GameState.reader(\n    game.ReplicatedStorage:WaitForChild(\"GameState\")\n)\n\ngameReader:ObserveKey(\"status\", function(status)\n    if status == \"active\" then\n        startGameUI()\n    elseif status == \"ended\" then\n        showEndScreen()\n    end\nend)\n</code></pre>"},{"location":"#player-data-synchronization","title":"Player Data Synchronization","text":"<pre><code>-- Server\ngame.Players.PlayerAdded:Connect(function(player)\n    local playerConfig = Instance.new(\"Configuration\")\n    playerConfig.Name = player.Name\n    playerConfig.Parent = game.ReplicatedStorage.PlayerData\n\n    local playerData = {\n        level = 1,\n        experience = 0,\n        inventory = {},\n        stats = {\n            health = 100,\n            mana = 50\n        }\n    }\n\n    local playerBinder = Structure.binder(playerData, playerConfig)\n\n    -- Update player data\n    playerBinder.level = 5\n    playerBinder.stats.health = 120\nend)\n</code></pre>"},{"location":"#best-practices","title":"Best Practices","text":""},{"location":"#performance","title":"Performance","text":"<ul> <li>Use appropriate deep levels for nested structures</li> <li>Batch data updates when possible</li> <li>Clean up unused structures with <code>:Destroy()</code></li> </ul>"},{"location":"#security","title":"Security","text":"<ul> <li>Validate data on server before binding</li> <li>Use FilteringEnabled-compliant patterns</li> <li>Sanitize user input</li> </ul>"},{"location":"#code-organization","title":"Code Organization","text":"<ul> <li>Separate server and client logic</li> <li>Use modules for reusable components</li> <li>Follow consistent naming conventions</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#common-issues","title":"Common Issues","text":"<p>Structure not updating on client: - Check if Configuration is properly replicated - Verify the structure is created on server first - Ensure proper parent hierarchy</p> <p>Memory leaks: - Always call <code>:Destroy()</code> on unused structures - Disconnect event connections when done - Avoid circular references in data</p> <p>Performance issues: - Limit deep nesting levels - Use batch updates for multiple changes - Monitor network traffic</p>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Discord: Community Server (coming soon)</li> </ul>"},{"location":"#license","title":"License","text":"<p>See LICENSE.md for more details.</p>"},{"location":"#changelog","title":"Changelog","text":""},{"location":"#v103","title":"v1.0.3","text":"<ul> <li>Improved Structure system performance</li> <li>Added comprehensive documentation</li> <li>Bug fixes and stability improvements</li> </ul>"},{"location":"#v102","title":"v1.0.2","text":"<ul> <li>Initial Structure system implementation</li> <li>Basic type system support</li> <li>Documentation setup</li> </ul> <p>Built with \u2764\ufe0f for the Roblox development community</p>"},{"location":"gen%20comment%20docs/","title":"Lua Documentation Style Guide (Docstring-based)","text":"<p>Standardized doc comment format for documenting Lua modules and APIs using multiline annotations.</p>"},{"location":"gen%20comment%20docs/#format","title":"\ud83d\udca1 Format","text":"<p>Use <code>--[=[ ... ]=]</code> for multiline doc comments. Avoid using single-line <code>--</code> for documentation purposes.</p>"},{"location":"gen%20comment%20docs/#structure","title":"\ud83e\uddf1 Structure","text":""},{"location":"gen%20comment%20docs/#top-modudle-description","title":"Top Modudle Description","text":"<pre><code>--[=[\n    @class ModuleName@1.0.0\n    Description of the module\n]=]\n</code></pre>"},{"location":"gen%20comment%20docs/#class-declaration","title":"Class Declaration","text":"<pre><code>--[=[\n    @class ClassName\n    Description of the module or class.\n]=]\n</code></pre>"},{"location":"gen%20comment%20docs/#type-definition","title":"Type Definition","text":"<pre><code>--[=[\n    @type TypeName\n    @within ClassName\n    @field FieldName Type Description\n    @field OptionalField? Type Optional description\n]=]\n</code></pre>"},{"location":"gen%20comment%20docs/#method-or-function-documentation","title":"Method or Function Documentation","text":"<p>Place directly above the method. \u26a0\ufe0f Do not include <code>@function</code> in function-level blocks.</p> <pre><code>--[=[\n    @within ClassName\n    @param paramName ParamType(default value) -- Description of the parameter\n    @return ReturnType Description of the return value\n\n    Multiline description of the method or function.\n]=]\nfunction ClassName:MethodName(...)\n</code></pre>"},{"location":"gen%20comment%20docs/#tags-optional-and-supported","title":"\ud83d\udd16 Tags (Optional and Supported)","text":"<ul> <li><code>@class</code> \u2014 Declares a class/module</li> <li><code>@type</code> \u2014 Declares a type alias or structure</li> <li><code>@param</code> \u2014 Describes a parameter</li> <li><code>@return</code> \u2014 Describes return values</li> <li><code>@within</code> \u2014 Groups the function/type under a class/module</li> <li><code>@tag</code> \u2014 Semantic tags like:</li> <li><code>Event</code></li> <li><code>Constructor</code></li> <li><code>Client</code>, <code>Server</code></li> </ul>"},{"location":"gen%20comment%20docs/#conventions","title":"\u2705 Conventions","text":"<ul> <li>Use exactly one doc block per item (class/type/function).</li> <li>Do not duplicate <code>@function</code> for every method.</li> <li>Use <code>@within</code> in every type/function block for nesting clarity.</li> <li>Avoid inline comments (<code>--</code>) for API documentation.</li> <li>Optional <code>@example</code> blocks may follow if needed.</li> </ul>"},{"location":"gen%20comment%20docs/#compatibility","title":"\ud83d\udee0 Compatibility","text":"<p>This format is compatible with: - LuneDocs - Dash - Roblox Language Server (LuaLS) - Stylua / Selene - ChatGPT / GitHub Copilot / Cody and other AI tools</p>"},{"location":"utils/Structure/","title":"Structure System","text":"<p>The Structure module provides powerful utilities for binding table data to <code>Configuration</code> instances (binder) and observing/reading structured data (reader). It enables seamless data synchronization between server and client in Roblox games.</p>"},{"location":"utils/Structure/#overview","title":"Overview","text":"<p>The Structure system offers: - Data Binding: Bind table data to Configuration instances on the server - Data Reading: Read and observe data from Configuration instances on the client - Deep Nesting: Support for nested structures with configurable depth - Auto-Synchronization: Automatic data sync between server and client - Type Safety: Support for Roblox's basic data types - Real-time Updates: Live observation of data changes</p>"},{"location":"utils/Structure/#supported-data-types","title":"Supported Data Types","text":"<p>Structure supports the following data types with automatic conversion:</p> Lua Type Roblox ValueBase <code>string</code> <code>StringValue</code> <code>number</code> (integer) <code>IntValue</code> <code>number</code> (decimal) <code>NumberValue</code> <code>boolean</code> <code>BoolValue</code> <code>Instance</code> <code>ObjectValue</code> <code>CFrame</code> <code>CFrameValue</code> <code>Vector3</code> <code>Vector3Value</code> <code>Color3</code> <code>Color3Value</code> <code>table</code> <code>Configuration</code> (nested)"},{"location":"utils/Structure/#architecture","title":"Architecture","text":""},{"location":"utils/Structure/#core-classes","title":"Core Classes","text":""},{"location":"utils/Structure/#structure","title":"Structure","text":"<p>Base class providing common functionality for all structure types.</p>"},{"location":"utils/Structure/#structurebinder","title":"StructureBinder","text":"<p>Server-side class for binding table data to Configuration instances.</p>"},{"location":"utils/Structure/#structurereader","title":"StructureReader","text":"<p>Client-side class for reading and observing data from Configuration instances.</p>"},{"location":"utils/Structure/#valuestructurebinder","title":"ValueStructureBinder","text":"<p>Specialized binder using ValueBase instances as keys.</p>"},{"location":"utils/Structure/#valuestructurereader","title":"ValueStructureReader","text":"<p>Corresponding reader for ValueStructureBinder.</p>"},{"location":"utils/Structure/#api-documentation","title":"API Documentation","text":""},{"location":"utils/Structure/#structurebinder_1","title":"Structure.binder()","text":"<pre><code>Structure.binder(dataTable: table, config: Configuration, deepLevel: number?) -&gt; StructureBinder\n</code></pre> <p>Creates a StructureBinder instance to bind a table to a Configuration.</p> <p>Parameters: - <code>dataTable</code> - Table containing data to bind - <code>config</code> - Configuration instance to bind to - <code>deepLevel</code> - Maximum depth for nested tables (default: 100)</p> <p>Returns: StructureBinder instance</p> <p>Example: <pre><code>local config = Instance.new(\"Configuration\")\nconfig.Name = \"PlayerData\"\nconfig.Parent = game.ReplicatedStorage\n\nlocal playerData = {\n    name = \"PlayerOne\",\n    level = 15,\n    inventory = {\n        coins = 1000,\n        items = {\"sword\", \"shield\"}\n    },\n    position = Vector3.new(0, 10, 0)\n}\n\nlocal binder = Structure.binder(playerData, config)\n\n-- Update data (automatically syncs to clients)\nbinder.level = 16\nbinder.inventory.coins = 1100\n</code></pre></p>"},{"location":"utils/Structure/#structurereader_1","title":"Structure.reader()","text":"<pre><code>Structure.reader(config: Configuration, deepLevel: number?, meta: StructureReader?) -&gt; StructureReader\n</code></pre> <p>Creates a StructureReader instance to read data from a Configuration.</p> <p>Parameters: - <code>config</code> - Configuration instance to read from - <code>deepLevel</code> - Maximum depth for nested structures (default: 100) - <code>meta</code> - Custom metatable (optional)</p> <p>Returns: StructureReader instance</p> <p>Example: <pre><code>-- Client-side\nlocal config = game.ReplicatedStorage:WaitForChild(\"PlayerData\")\nlocal reader = Structure.reader(config)\n\n-- Read current data\nprint(\"Player name:\", reader.name)\nprint(\"Player level:\", reader.level)\nprint(\"Coins:\", reader.inventory.coins)\n</code></pre></p>"},{"location":"utils/Structure/#structurefromskeleton","title":"Structure.fromSkeleton()","text":"<pre><code>Structure.fromSkeleton(\n    dataTable: table, \n    config: Configuration, \n    skeleton: table, \n    deepLevel: number?, \n    meta: StructureBinder?\n) -&gt; StructureBinder\n</code></pre> <p>Binds a table according to a predefined skeleton structure.</p> <p>Parameters: - <code>dataTable</code> - Actual data to bind - <code>config</code> - Configuration instance - <code>skeleton</code> - Skeleton structure definition - <code>deepLevel</code> - Maximum depth - <code>meta</code> - Custom metatable</p> <p>Example: <pre><code>local skeleton = {\n    player = {\n        stats = {\n            health = 0,\n            mana = 0\n        },\n        settings = {\n            volume = 0.5,\n            graphics = \"medium\"\n        }\n    }\n}\n\nlocal data = {\n    player = {\n        stats = {\n            health = 100,\n            mana = 50\n        },\n        settings = {\n            volume = 0.8,\n            graphics = \"high\"\n        }\n    }\n}\n\nlocal binder = Structure.fromSkeleton(data, config, skeleton)\n</code></pre></p>"},{"location":"utils/Structure/#structurebridger","title":"Structure.bridger()","text":"<pre><code>Structure.bridger(\n    dataTable: table, \n    config: Configuration, \n    skeleton: table, \n    deepLevel: number?\n) -&gt; StructureBinder | StructureReader\n</code></pre> <p>Creates a binder on server or reader on client automatically based on context.</p> <p>Example: <pre><code>-- This code works on both server and client\nlocal bridger = Structure.bridger(data, config, skeleton)\n\n-- On server: returns StructureBinder\n-- On client: returns StructureReader\n</code></pre></p>"},{"location":"utils/Structure/#structurebinder-methods","title":"StructureBinder Methods","text":""},{"location":"utils/Structure/#set","title":"Set()","text":"<pre><code>binder:Set(tb: table) -&gt; ()\n</code></pre> <p>Replaces all current data with a new table, clearing existing bindings.</p> <p>Example: <pre><code>binder:Set({\n    newField = \"value\",\n    anotherField = 42,\n    nested = {\n        data = true\n    }\n})\n</code></pre></p>"},{"location":"utils/Structure/#destroy","title":"Destroy()","text":"<pre><code>binder:Destroy() -&gt; ()\n</code></pre> <p>Cleans up resources and destroys all bound instances.</p>"},{"location":"utils/Structure/#structurereader-methods","title":"StructureReader Methods","text":""},{"location":"utils/Structure/#onchange","title":"OnChange()","text":"<pre><code>reader:OnChange(callback: CallbackFnc) -&gt; ()\n</code></pre> <p>Registers a callback to be called when the structure changes.</p> <p>Example: <pre><code>reader:OnChange(function(key, value)\n    print(\"Data changed:\", key, \"-&gt;\", value)\nend)\n</code></pre></p>"},{"location":"utils/Structure/#observe","title":"Observe()","text":"<pre><code>reader:Observe(onNew: AddOrDesCallback?, onDes: AddOrDesCallback?) -&gt; ()\n</code></pre> <p>Observes when new keys are added or existing keys are removed.</p> <p>Example: <pre><code>reader:Observe(\n    function(key) \n        print(\"New key added:\", key) \n    end,\n    function(key) \n        print(\"Key removed:\", key) \n    end\n)\n</code></pre></p>"},{"location":"utils/Structure/#observekey","title":"ObserveKey()","text":"<pre><code>reader:ObserveKey(key: string, callback: ValueCallbackFnc) -&gt; ()\n</code></pre> <p>Observes changes to a specific key.</p> <p>Example: <pre><code>reader:ObserveKey(\"level\", function(newLevel)\n    print(\"Player leveled up to:\", newLevel)\n    updateLevelUI(newLevel)\nend)\n</code></pre></p>"},{"location":"utils/Structure/#onpairs","title":"OnPairs()","text":"<pre><code>reader:OnPairs(callback: CallbackFnc) -&gt; ()\n</code></pre> <p>Registers a callback for each existing and new key-value pair.</p> <p>Example: <pre><code>reader:OnPairs(function(key, value)\n    print(\"Processing pair:\", key, \"=\", value)\nend)\n</code></pre></p>"},{"location":"utils/Structure/#raw","title":"Raw()","text":"<pre><code>reader:Raw() -&gt; table\n</code></pre> <p>Returns the raw table data without Structure wrapper.</p>"},{"location":"utils/Structure/#wait","title":"Wait()","text":"<pre><code>reader:Wait(k: string) -&gt; any\n</code></pre> <p>Waits for a key to appear (maximum 30 seconds timeout).</p> <p>Example: <pre><code>local importantData = reader:Wait(\"missionData\")\nprint(\"Mission data received:\", importantData)\n</code></pre></p>"},{"location":"utils/Structure/#complete-examples","title":"Complete Examples","text":""},{"location":"utils/Structure/#server-implementation","title":"Server Implementation","text":"<pre><code>local Structure = require(ReplicatedStorage.Systems.Structure)\n\n-- Game state data\nlocal gameState = {\n    round = 1,\n    timeRemaining = 300,\n    status = \"waiting\",\n    players = {},\n    leaderboard = {\n        top3 = {}\n    }\n}\n\n-- Create Configuration in ReplicatedStorage\nlocal gameConfig = Instance.new(\"Configuration\")\ngameConfig.Name = \"GameState\"\ngameConfig.Parent = game.ReplicatedStorage\n\n-- Bind the data\nlocal gameBinder = Structure.binder(gameState, gameConfig)\n\n-- Game logic updates\ngame.Players.PlayerAdded:Connect(function(player)\n    gameBinder.players[player.Name] = {\n        score = 0,\n        kills = 0,\n        deaths = 0,\n        joinTime = os.time()\n    }\nend)\n\ngame.Players.PlayerRemoving:Connect(function(player)\n    gameBinder.players[player.Name] = nil\nend)\n\n-- Update game state\nlocal function startNewRound()\n    gameBinder.round = gameBinder.round + 1\n    gameBinder.timeRemaining = 300\n    gameBinder.status = \"active\"\n\n    -- Reset player scores\n    for playerName, playerData in gameBinder.players do\n        playerData.score = 0\n        playerData.kills = 0\n        playerData.deaths = 0\n    end\nend\n</code></pre>"},{"location":"utils/Structure/#client-implementation","title":"Client Implementation","text":"<pre><code>local Structure = require(ReplicatedStorage.Systems.Structure)\nlocal Players = game:GetService(\"Players\")\n\n-- Read game state from server\nlocal gameConfig = game.ReplicatedStorage:WaitForChild(\"GameState\")\nlocal gameReader = Structure.reader(gameConfig)\n\n-- UI References\nlocal gameUI = Players.LocalPlayer.PlayerGui:WaitForChild(\"GameUI\")\nlocal roundLabel = gameUI.RoundLabel\nlocal timerLabel = gameUI.TimerLabel\nlocal leaderboardFrame = gameUI.LeaderboardFrame\n\n-- Observe round changes\ngameReader:ObserveKey(\"round\", function(newRound)\n    roundLabel.Text = \"Round \" .. newRound\n    print(\"Starting round\", newRound)\nend)\n\n-- Observe timer changes\ngameReader:ObserveKey(\"timeRemaining\", function(timeLeft)\n    local minutes = math.floor(timeLeft / 60)\n    local seconds = timeLeft % 60\n    timerLabel.Text = string.format(\"%02d:%02d\", minutes, seconds)\n\n    if timeLeft &lt;= 10 then\n        timerLabel.TextColor3 = Color3.new(1, 0, 0) -- Red warning\n    else\n        timerLabel.TextColor3 = Color3.new(1, 1, 1) -- White\n    end\nend)\n\n-- Observe player data changes\ngameReader.players:OnChange(function(playerName, playerData)\n    if playerData then\n        updatePlayerInLeaderboard(playerName, playerData)\n    else\n        removePlayerFromLeaderboard(playerName)\n    end\nend)\n\n-- Observe game status\ngameReader:ObserveKey(\"status\", function(status)\n    if status == \"waiting\" then\n        showWaitingScreen()\n    elseif status == \"active\" then\n        showGameScreen()\n    elseif status == \"ended\" then\n        showEndScreen()\n    end\nend)\n\n-- Helper functions\nfunction updatePlayerInLeaderboard(playerName, playerData)\n    local playerFrame = leaderboardFrame:FindFirstChild(playerName)\n    if not playerFrame then\n        playerFrame = leaderboardFrame.PlayerTemplate:Clone()\n        playerFrame.Name = playerName\n        playerFrame.Visible = true\n        playerFrame.Parent = leaderboardFrame\n    end\n\n    playerFrame.PlayerName.Text = playerName\n    playerFrame.Score.Text = tostring(playerData.score)\n    playerFrame.KD.Text = string.format(\"%d/%d\", playerData.kills, playerData.deaths)\nend\n\nfunction removePlayerFromLeaderboard(playerName)\n    local playerFrame = leaderboardFrame:FindFirstChild(playerName)\n    if playerFrame then\n        playerFrame:Destroy()\n    end\nend\n</code></pre>"},{"location":"utils/Structure/#advanced-usage-with-skeleton","title":"Advanced Usage with Skeleton","text":"<pre><code>-- Define a complex game data structure\nlocal gameDataSkeleton = {\n    settings = {\n        gameplay = {\n            roundTime = 300,\n            maxPlayers = 16,\n            friendlyFire = false\n        },\n        graphics = {\n            quality = \"medium\",\n            shadows = true,\n            particleEffects = true\n        }\n    },\n    match = {\n        teams = {\n            red = {\n                players = {},\n                score = 0,\n                color = Color3.new(1, 0, 0)\n            },\n            blue = {\n                players = {},\n                score = 0,\n                color = Color3.new(0, 0, 1)\n            }\n        },\n        powerups = {},\n        events = {}\n    }\n}\n\n-- Initialize with default data\nlocal defaultGameData = {\n    settings = {\n        gameplay = {\n            roundTime = 600,\n            maxPlayers = 20,\n            friendlyFire = true\n        },\n        graphics = {\n            quality = \"high\",\n            shadows = true,\n            particleEffects = true\n        }\n    },\n    match = {\n        teams = {\n            red = {\n                players = {\"Player1\", \"Player2\"},\n                score = 0,\n                color = Color3.new(1, 0, 0)\n            },\n            blue = {\n                players = {\"Player3\", \"Player4\"},\n                score = 0,\n                color = Color3.new(0, 0, 1)\n            }\n        },\n        powerups = {\n            \"speed_boost\",\n            \"shield\"\n        },\n        events = {}\n    }\n}\n\nlocal config = Instance.new(\"Configuration\")\nconfig.Name = \"AdvancedGameData\"\nconfig.Parent = game.ReplicatedStorage\n\nlocal advancedBinder = Structure.fromSkeleton(\n    defaultGameData, \n    config, \n    gameDataSkeleton, \n    5  -- Limit depth to 5 levels\n)\n\n-- Update nested data\nadvancedBinder.settings.gameplay.roundTime = 450\nadvancedBinder.match.teams.red.score = 10\ntable.insert(advancedBinder.match.powerups, \"health_pack\")\n</code></pre>"},{"location":"utils/Structure/#best-practices","title":"Best Practices","text":""},{"location":"utils/Structure/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Limit Deep Level: Use appropriate <code>deepLevel</code> values to prevent performance issues with overly deep structures.    <pre><code>-- Good: Reasonable depth\nlocal binder = Structure.binder(data, config, 3)\n\n-- Avoid: Excessive depth\nlocal binder = Structure.binder(data, config, 50)\n</code></pre></p> </li> <li> <p>Batch Updates: When making multiple changes, batch them to reduce network traffic.    <pre><code>-- Good: Batch updates\nlocal newData = {\n    health = 100,\n    mana = 50,\n    level = 10\n}\nbinder:Set(newData)\n\n-- Avoid: Individual updates\nbinder.health = 100\nbinder.mana = 50\nbinder.level = 10\n</code></pre></p> </li> </ol>"},{"location":"utils/Structure/#memory-management","title":"Memory Management","text":"<ol> <li> <p>Always Destroy: Call <code>Destroy()</code> when structures are no longer needed.    <pre><code>local binder = Structure.binder(data, config)\n\n-- When done\nbinder:Destroy()\n</code></pre></p> </li> <li> <p>Avoid Memory Leaks: Be careful with circular references in callback functions.</p> </li> </ol>"},{"location":"utils/Structure/#error-handling","title":"Error Handling","text":"<ol> <li> <p>Use pcall: Wrap Structure operations in pcall for production code.    <pre><code>local success, result = pcall(function()\n    return Structure.binder(data, config)\nend)\n\nif not success then\n    warn(\"Failed to create structure binder:\", result)\nend\n</code></pre></p> </li> <li> <p>Validate Data Types: Ensure data types are supported before binding.    <pre><code>local function isValidDataType(value)\n    local valueType = typeof(value)\n    return valueType == \"string\" \n        or valueType == \"number\" \n        or valueType == \"boolean\"\n        or valueType == \"Instance\"\n        or valueType == \"CFrame\"\n        or valueType == \"Vector3\"\n        or valueType == \"Color3\"\n        or type(value) == \"table\"\nend\n</code></pre></p> </li> </ol>"},{"location":"utils/Structure/#code-organization","title":"Code Organization","text":"<ol> <li> <p>Separate Concerns: Keep binder logic on server, reader logic on client.</p> </li> <li> <p>Use Modules: Organize Structure usage in dedicated modules.    <pre><code>-- DataManager.lua (Server)\nlocal DataManager = {}\n\nfunction DataManager.createPlayerBinder(player, data)\n    local config = Instance.new(\"Configuration\")\n    config.Name = player.Name .. \"_Data\"\n    config.Parent = game.ReplicatedStorage.PlayerData\n\n    return Structure.binder(data, config)\nend\n\nreturn DataManager\n</code></pre></p> </li> </ol>"},{"location":"utils/Structure/#limitations-and-considerations","title":"Limitations and Considerations","text":""},{"location":"utils/Structure/#data-type-limitations","title":"Data Type Limitations","text":"<ul> <li>Only supports Roblox's basic data types</li> <li>No support for functions or coroutines</li> <li>Tables with circular references are not supported</li> </ul>"},{"location":"utils/Structure/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Deep nesting can impact performance</li> <li>Large datasets may cause network congestion</li> <li>Frequent updates can overwhelm the replication system</li> </ul>"},{"location":"utils/Structure/#network-limitations","title":"Network Limitations","text":"<ul> <li>Attributes have size limitations</li> <li>Too many ValueBase instances can impact performance</li> <li>Consider using RemoteEvents for large data transfers</li> </ul>"},{"location":"utils/Structure/#error-scenarios","title":"Error Scenarios","text":"<ul> <li>Invalid data types will throw errors</li> <li>Destroyed Configuration instances will break readers</li> <li>Network issues can cause desynchronization</li> </ul>"},{"location":"utils/Structure/#troubleshooting","title":"Troubleshooting","text":""},{"location":"utils/Structure/#common-issues","title":"Common Issues","text":"<ol> <li> <p>\"Unsupported value type\" Error <pre><code>-- Problem: Unsupported data type\nbinder.functionValue = function() end -- Error!\n\n-- Solution: Use only supported types\nbinder.stringValue = \"text\"\nbinder.numberValue = 42\n</code></pre></p> </li> <li> <p>Memory Leaks <pre><code>-- Problem: Not destroying structures\nlocal binder = Structure.binder(data, config)\n-- Never call binder:Destroy()\n\n-- Solution: Always clean up\nbinder:Destroy()\n</code></pre></p> </li> <li> <p>Synchronization Issues <pre><code>-- Problem: Reading data before it's ready\nlocal reader = Structure.reader(config)\nprint(reader.playerName) -- Might be nil\n\n-- Solution: Use Wait() or observe changes\nlocal playerName = reader:Wait(\"playerName\")\n-- or\nreader:ObserveKey(\"playerName\", function(name)\n    print(\"Player name:\", name)\nend)\n</code></pre></p> </li> </ol>"},{"location":"utils/Structure/#debug-tips","title":"Debug Tips","text":"<ol> <li> <p>Enable Verbose Logging <pre><code>reader:OnChange(function(key, value)\n    print(\"DEBUG: Structure changed -\", key, \":\", value)\nend)\n</code></pre></p> </li> <li> <p>Check Configuration Structure <pre><code>local function printConfigStructure(config, indent)\n    indent = indent or \"\"\n    print(indent .. config.Name .. \" (\" .. config.ClassName .. \")\")\n\n    for _, child in config:GetChildren() do\n        if child:IsA(\"Configuration\") then\n            printConfigStructure(child, indent .. \"  \")\n        else\n            print(indent .. \"  \" .. child.Name .. \" = \" .. tostring(child.Value))\n        end\n    end\nend\n\nprintConfigStructure(game.ReplicatedStorage.GameData)\n</code></pre></p> </li> </ol> <p>This comprehensive documentation should help developers understand and effectively use the Structure system in their Roblox projects.</p>"},{"location":"vi/","title":"RbxUtils Documentation","text":"<p>Ch\u00e0o m\u1eebng \u0111\u1ebfn v\u1edbi t\u00e0i li\u1ec7u RbxUtils - m\u1ed9t b\u1ed9 s\u01b0u t\u1eadp c\u00e1c ti\u1ec7n \u00edch m\u1ea1nh m\u1ebd cho Roblox development.</p>"},{"location":"vi/#tong-quan","title":"T\u1ed5ng quan","text":"<p>RbxUtils cung c\u1ea5p c\u00e1c module v\u00e0 ti\u1ec7n \u00edch \u0111\u1ec3 gi\u00fap b\u1ea1n ph\u00e1t tri\u1ec3n game Roblox hi\u1ec7u qu\u1ea3 h\u01a1n. Bao g\u1ed3m:</p> <ul> <li>Structure System: H\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd v\u00e0 \u0111\u1ed3ng b\u1ed9 d\u1eef li\u1ec7u gi\u1eefa server-client</li> <li>Type System: H\u1ec7 th\u1ed1ng ki\u1ec3u d\u1eef li\u1ec7u m\u1ea1nh m\u1ebd</li> <li>V\u00e0 nhi\u1ec1u ti\u1ec7n \u00edch kh\u00e1c...</li> </ul>"},{"location":"vi/#bat-au-nhanh","title":"B\u1eaft \u0111\u1ea7u nhanh","text":""},{"location":"vi/#cai-at","title":"C\u00e0i \u0111\u1eb7t","text":"<ol> <li>Clone repository n\u00e0y v\u00e0o d\u1ef1 \u00e1n Roblox c\u1ee7a b\u1ea1n</li> <li>S\u1eed d\u1ee5ng Rojo \u0111\u1ec3 sync code v\u00e0o Roblox Studio</li> <li>Require c\u00e1c module c\u1ea7n thi\u1ebft trong script c\u1ee7a b\u1ea1n</li> </ol>"},{"location":"vi/#vi-du-co-ban","title":"V\u00ed d\u1ee5 c\u01a1 b\u1ea3n","text":"<pre><code>local Structure = require(ReplicatedStorage.Systems.Structure)\n\n-- T\u1ea1o structure \u0111\u1ec3 qu\u1ea3n l\u00fd d\u1eef li\u1ec7u game\nlocal gameData = {\n    round = 1,\n    players = {},\n    settings = {\n        maxPlayers = 10,\n        roundTime = 300\n    }\n}\n\nlocal config = Instance.new(\"Configuration\")\nconfig.Name = \"GameData\"\nconfig.Parent = game.ReplicatedStorage\n\nlocal binder = Structure.binder(gameData, config)\n</code></pre>"},{"location":"vi/#modules","title":"Modules","text":""},{"location":"vi/#structure","title":"Structure","text":"<p>H\u1ec7 th\u1ed1ng m\u1ea1nh m\u1ebd \u0111\u1ec3 bind v\u00e0 \u0111\u1ed3ng b\u1ed9 d\u1eef li\u1ec7u table v\u1edbi Configuration instances, h\u1ed7 tr\u1ee3 quan s\u00e1t thay \u0111\u1ed5i real-time.</p>"},{"location":"vi/#yeu-cau-he-thong","title":"Y\u00eau c\u1ea7u h\u1ec7 th\u1ed1ng","text":"<ul> <li>Roblox Studio</li> <li>Rojo (khuy\u1ebfn ngh\u1ecb)</li> <li>Aftman (cho dependency management)</li> </ul>"},{"location":"vi/#ong-gop","title":"\u0110\u00f3ng g\u00f3p","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"vi/#license","title":"License","text":"<p>Xem file LICENSE.md \u0111\u1ec3 bi\u1ebft th\u00eam chi ti\u1ebft.</p>"},{"location":"vi/utils/Structure/","title":"Structure","text":"<p>Structure l\u00e0 m\u1ed9t module m\u1ea1nh m\u1ebd cung c\u1ea5p c\u00e1c ti\u1ec7n \u00edch \u0111\u1ec3 bind d\u1eef li\u1ec7u table v\u1edbi c\u00e1c instance <code>Configuration</code> (binder), v\u00e0 \u0111\u1ec3 quan s\u00e1t v\u00e0 \u0111\u1ecdc d\u1eef li\u1ec7u c\u00f3 c\u1ea5u tr\u00fac (reader).</p>"},{"location":"vi/utils/Structure/#tong-quan","title":"T\u1ed5ng quan","text":"<p>Module Structure h\u1ed7 tr\u1ee3: - Binding: Li\u00ean k\u1ebft d\u1eef li\u1ec7u table v\u1edbi Configuration instances tr\u00ean server - Reading: \u0110\u1ecdc v\u00e0 quan s\u00e1t d\u1eef li\u1ec7u t\u1eeb Configuration instances tr\u00ean client - Deep nesting: H\u1ed7 tr\u1ee3 nested structures v\u1edbi \u0111\u1ed9 s\u00e2u c\u00f3 th\u1ec3 c\u1ea5u h\u00ecnh - Auto-sync: T\u1ef1 \u0111\u1ed9ng \u0111\u1ed3ng b\u1ed9 d\u1eef li\u1ec7u gi\u1eefa server v\u00e0 client - Type safety: H\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u Roblox c\u01a1 b\u1ea3n</p>"},{"location":"vi/utils/Structure/#cac-kieu-du-lieu-uoc-ho-tro","title":"C\u00e1c ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3","text":"<p>Structure h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u sau: - <code>string</code> \u2192 <code>StringValue</code> - <code>number</code> (integer) \u2192 <code>IntValue</code> - <code>number</code> (float) \u2192 <code>NumberValue</code> - <code>boolean</code> \u2192 <code>BoolValue</code> - <code>Instance</code> \u2192 <code>ObjectValue</code> - <code>CFrame</code> \u2192 <code>CFrameValue</code> - <code>Vector3</code> \u2192 <code>Vector3Value</code> - <code>Color3</code> \u2192 <code>Color3Value</code> - <code>table</code> \u2192 <code>Configuration</code> (nested structure)</p>"},{"location":"vi/utils/Structure/#classes","title":"Classes","text":""},{"location":"vi/utils/Structure/#structure_1","title":"Structure","text":"<p>L\u1edbp c\u01a1 s\u1edf cung c\u1ea5p c\u00e1c ch\u1ee9c n\u0103ng chung.</p>"},{"location":"vi/utils/Structure/#structurebinder","title":"StructureBinder","text":"<p>L\u1edbp d\u00e0nh cho server \u0111\u1ec3 bind d\u1eef li\u1ec7u table v\u00e0o Configuration instances.</p>"},{"location":"vi/utils/Structure/#structurereader","title":"StructureReader","text":"<p>L\u1edbp d\u00e0nh cho client \u0111\u1ec3 \u0111\u1ecdc v\u00e0 quan s\u00e1t d\u1eef li\u1ec7u t\u1eeb Configuration instances.</p>"},{"location":"vi/utils/Structure/#valuestructurebinder","title":"ValueStructureBinder","text":"<p>L\u1edbp binder \u0111\u1eb7c bi\u1ec7t s\u1eed d\u1ee5ng ValueBase instances l\u00e0m keys.</p>"},{"location":"vi/utils/Structure/#valuestructurereader","title":"ValueStructureReader","text":"<p>L\u1edbp reader t\u01b0\u01a1ng \u1ee9ng v\u1edbi ValueStructureBinder.</p>"},{"location":"vi/utils/Structure/#api-reference","title":"API Reference","text":""},{"location":"vi/utils/Structure/#structurebinder_1","title":"Structure.binder()","text":"<p><pre><code>Structure.binder(dataTable: table, config: Configuration, deepLevel: number?) -&gt; StructureBinder\n</code></pre> T\u1ea1o m\u1ed9t StructureBinder instance \u0111\u1ec3 bind table v\u00e0o Configuration.</p> <p>Parameters: - <code>dataTable</code>: Table ch\u1ee9a d\u1eef li\u1ec7u c\u1ea7n bind - <code>config</code>: Configuration instance \u0111\u1ec3 bind v\u00e0o - <code>deepLevel</code>: \u0110\u1ed9 s\u00e2u t\u1ed1i \u0111a cho nested tables (m\u1eb7c \u0111\u1ecbnh: 100)</p> <p>Returns: StructureBinder instance</p> <p>V\u00ed d\u1ee5: <pre><code>local config = Instance.new(\"Configuration\")\nconfig.Parent = workspace\n\nlocal data = {\n    playerName = \"John\",\n    level = 10,\n    stats = {\n        health = 100,\n        mana = 50\n    }\n}\n\nlocal binder = Structure.binder(data, config)\nbinder.playerName = \"Jane\"  -- T\u1ef1 \u0111\u1ed9ng c\u1eadp nh\u1eadt Configuration\n</code></pre></p>"},{"location":"vi/utils/Structure/#structurereader_1","title":"Structure.reader()","text":"<p><pre><code>Structure.reader(config: Configuration, deepLevel: number?, meta: StructureReader?) -&gt; StructureReader\n</code></pre> T\u1ea1o m\u1ed9t StructureReader instance \u0111\u1ec3 \u0111\u1ecdc d\u1eef li\u1ec7u t\u1eeb Configuration.</p> <p>Parameters: - <code>config</code>: Configuration instance \u0111\u1ec3 \u0111\u1ecdc t\u1eeb - <code>deepLevel</code>: \u0110\u1ed9 s\u00e2u t\u1ed1i \u0111a cho nested structures (m\u1eb7c \u0111\u1ecbnh: 100) - <code>meta</code>: Metatable t\u00f9y ch\u1ec9nh (t\u00f9y ch\u1ecdn)</p> <p>Returns: StructureReader instance</p> <p>V\u00ed d\u1ee5: <pre><code>local config = workspace:FindFirstChild(\"PlayerData\")\nlocal reader = Structure.reader(config)\n\n-- \u0110\u1ecdc d\u1eef li\u1ec7u\nprint(reader.playerName)  -- \"Jane\"\nprint(reader.stats.health)  -- 100\n</code></pre></p>"},{"location":"vi/utils/Structure/#structurefromskeleton","title":"Structure.fromSkeleton()","text":"<p><pre><code>Structure.fromSkeleton(dataTable: table, config: Configuration, skeleton: table, deepLevel: number?, meta: StructureBinder?) -&gt; StructureBinder\n</code></pre> Bind table theo m\u1ed9t skeleton structure \u0111\u01b0\u1ee3c \u0111\u1ecbnh ngh\u0129a tr\u01b0\u1edbc.</p> <p>Parameters: - <code>dataTable</code>: D\u1eef li\u1ec7u th\u1ef1c t\u1ebf - <code>config</code>: Configuration instance - <code>skeleton</code>: C\u1ea5u tr\u00fac skeleton - <code>deepLevel</code>: \u0110\u1ed9 s\u00e2u t\u1ed1i \u0111a - <code>meta</code>: Metatable t\u00f9y ch\u1ec9nh</p>"},{"location":"vi/utils/Structure/#structurebridger","title":"Structure.bridger()","text":"<p><pre><code>Structure.bridger(dataTable: table, config: Configuration, skeleton: table, deepLevel: number?) -&gt; StructureBinder | StructureReader\n</code></pre> T\u1ea1o binder tr\u00ean server ho\u1eb7c reader tr\u00ean client t\u1ef1 \u0111\u1ed9ng.</p> <p>V\u00ed d\u1ee5: <pre><code>-- Code n\u00e0y ho\u1ea1t \u0111\u1ed9ng tr\u00ean c\u1ea3 server v\u00e0 client\nlocal bridger = Structure.bridger(data, config, skeleton)\n\n-- Tr\u00ean server: tr\u1ea3 v\u1ec1 StructureBinder\n-- Tr\u00ean client: tr\u1ea3 v\u1ec1 StructureReader\n</code></pre></p>"},{"location":"vi/utils/Structure/#structurebinder-methods","title":"StructureBinder Methods","text":""},{"location":"vi/utils/Structure/#set","title":"Set()","text":"<p><pre><code>binder:Set(tb: table) -&gt; ()\n</code></pre> Thay th\u1ebf to\u00e0n b\u1ed9 d\u1eef li\u1ec7u hi\u1ec7n t\u1ea1i b\u1eb1ng table m\u1edbi.</p> <p>V\u00ed d\u1ee5: <pre><code>binder:Set({\n    newData = \"value\",\n    anotherField = 123\n})\n</code></pre></p>"},{"location":"vi/utils/Structure/#structurereader-methods","title":"StructureReader Methods","text":""},{"location":"vi/utils/Structure/#onchange","title":"OnChange()","text":"<p><pre><code>reader:OnChange(callback: CallbackFnc) -&gt; ()\n</code></pre> \u0110\u0103ng k\u00fd callback \u0111\u01b0\u1ee3c g\u1ecdi khi structure thay \u0111\u1ed5i.</p> <p>V\u00ed d\u1ee5: <pre><code>reader:OnChange(function(key, value)\n    print(\"Changed:\", key, \"to\", value)\nend)\n</code></pre></p>"},{"location":"vi/utils/Structure/#observe","title":"Observe()","text":"<p><pre><code>reader:Observe(onNew: AddOrDesCallback?, onDes: AddOrDesCallback?) -&gt; ()\n</code></pre> Quan s\u00e1t khi c\u00f3 key m\u1edbi \u0111\u01b0\u1ee3c th\u00eam ho\u1eb7c b\u1ecb x\u00f3a.</p> <p>V\u00ed d\u1ee5: <pre><code>reader:Observe(\n    function(key) print(\"New key:\", key) end,\n    function(key) print(\"Removed key:\", key) end\n)\n</code></pre></p>"},{"location":"vi/utils/Structure/#observekey","title":"ObserveKey()","text":"<p><pre><code>reader:ObserveKey(key: string, callback: ValueCallbackFnc) -&gt; ()\n</code></pre> Quan s\u00e1t m\u1ed9t key c\u1ee5 th\u1ec3.</p> <p>V\u00ed d\u1ee5: <pre><code>reader:ObserveKey(\"playerName\", function(value)\n    print(\"Player name changed to:\", value)\nend)\n</code></pre></p>"},{"location":"vi/utils/Structure/#onpairs","title":"OnPairs()","text":"<p><pre><code>reader:OnPairs(callback: CallbackFnc) -&gt; ()\n</code></pre> \u0110\u0103ng k\u00fd callback cho m\u1ed7i c\u1eb7p key-value hi\u1ec7n c\u00f3 v\u00e0 m\u1edbi.</p> <p>V\u00ed d\u1ee5: <pre><code>reader:OnPairs(function(key, value)\n    print(\"Key-value pair:\", key, value)\nend)\n</code></pre></p>"},{"location":"vi/utils/Structure/#raw","title":"Raw()","text":"<p><pre><code>reader:Raw() -&gt; table\n</code></pre> L\u1ea5y raw table data.</p>"},{"location":"vi/utils/Structure/#wait","title":"Wait()","text":"<p><pre><code>reader:Wait(k: string) -&gt; any\n</code></pre> \u0110\u1ee3i cho \u0111\u1ebfn khi key xu\u1ea5t hi\u1ec7n (t\u1ed1i \u0111a 30 gi\u00e2y).</p> <p>V\u00ed d\u1ee5: <pre><code>local value = reader:Wait(\"importantData\")\nprint(\"Got important data:\", value)\n</code></pre></p>"},{"location":"vi/utils/Structure/#destroy","title":"Destroy()","text":"<p><pre><code>structure:Destroy() -&gt; ()\n</code></pre> D\u1ecdn d\u1eb9p t\u00e0i nguy\u00ean v\u00e0 ng\u1eaft k\u1ebft n\u1ed1i.</p>"},{"location":"vi/utils/Structure/#vi-du-hoan-chinh","title":"V\u00ed d\u1ee5 ho\u00e0n ch\u1ec9nh","text":""},{"location":"vi/utils/Structure/#server-binder","title":"Server (Binder)","text":"<pre><code>local Structure = require(ReplicatedStorage.Systems.Structure)\n\n-- T\u1ea1o d\u1eef li\u1ec7u game\nlocal gameData = {\n    round = 1,\n    timeLeft = 300,\n    players = {\n        [\"Player1\"] = {\n            score = 100,\n            kills = 5\n        },\n        [\"Player2\"] = {\n            score = 80,\n            kills = 3\n        }\n    }\n}\n\n-- T\u1ea1o Configuration trong ReplicatedStorage\nlocal config = Instance.new(\"Configuration\")\nconfig.Name = \"GameData\"\nconfig.Parent = game.ReplicatedStorage\n\n-- Bind d\u1eef li\u1ec7u\nlocal binder = Structure.binder(gameData, config)\n\n-- C\u1eadp nh\u1eadt d\u1eef li\u1ec7u (s\u1ebd t\u1ef1 \u0111\u1ed9ng sync \u0111\u1ebfn client)\nbinder.round = 2\nbinder.timeLeft = 299\nbinder.players[\"Player1\"].score = 110\n</code></pre>"},{"location":"vi/utils/Structure/#client-reader","title":"Client (Reader)","text":"<pre><code>local Structure = require(ReplicatedStorage.Systems.Structure)\n\n-- \u0110\u1ecdc d\u1eef li\u1ec7u t\u1eeb server\nlocal config = game.ReplicatedStorage:WaitForChild(\"GameData\")\nlocal reader = Structure.reader(config)\n\n-- Quan s\u00e1t thay \u0111\u1ed5i\nreader:OnChange(function(key, value)\n    if key == \"round\" then\n        print(\"New round:\", value)\n    elseif key == \"timeLeft\" then\n        updateTimerUI(value)\n    end\nend)\n\n-- Quan s\u00e1t players\nreader.players:OnChange(function(playerName, playerData)\n    updatePlayerScore(playerName, playerData.score)\nend)\n\n-- \u0110\u1ecdc d\u1eef li\u1ec7u hi\u1ec7n t\u1ea1i\nprint(\"Current round:\", reader.round)\nprint(\"Time left:\", reader.timeLeft)\n</code></pre>"},{"location":"vi/utils/Structure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Deep Level: S\u1eed d\u1ee5ng <code>deepLevel</code> h\u1ee3p l\u00fd \u0111\u1ec3 tr\u00e1nh hi\u1ec7u su\u1ea5t k\u00e9m v\u1edbi structures qu\u00e1 s\u00e2u.</p> </li> <li> <p>Memory Management: Lu\u00f4n g\u1ecdi <code>Destroy()</code> khi kh\u00f4ng c\u1ea7n thi\u1ebft \u0111\u1ec3 gi\u1ea3i ph\u00f3ng memory.</p> </li> <li> <p>Error Handling: S\u1eed d\u1ee5ng <code>pcall</code> khi c\u1ea7n thi\u1ebft v\u00ec m\u1ed9t s\u1ed1 operations c\u00f3 th\u1ec3 fail.</p> </li> <li> <p>Type Safety: Ch\u1ec9 s\u1eed d\u1ee5ng c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 \u0111\u1ec3 tr\u00e1nh l\u1ed7i.</p> </li> <li> <p>Performance: V\u1edbi d\u1eef li\u1ec7u l\u1edbn, c\u00e2n nh\u1eafc chia nh\u1ecf th\u00e0nh nhi\u1ec1u Configuration instances.</p> </li> </ol>"},{"location":"vi/utils/Structure/#limitations","title":"Limitations","text":"<ul> <li>Ch\u1ec9 h\u1ed7 tr\u1ee3 c\u00e1c ki\u1ec3u d\u1eef li\u1ec7u c\u01a1 b\u1ea3n c\u1ee7a Roblox</li> <li>Kh\u00f4ng h\u1ed7 tr\u1ee3 circular references trong tables</li> <li>Deep level c\u00f3 gi\u1edbi h\u1ea1n \u0111\u1ec3 tr\u00e1nh stack overflow</li> <li>Attributes c\u00f3 gi\u1edbi h\u1ea1n v\u1ec1 k\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u</li> </ul>"}]}